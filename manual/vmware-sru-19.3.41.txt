# Part 1: Import Images in to vSphere

Set PASSWORD to the vSphere admin's password before running the following
commands.

# To be adapted to the SRU to test
SRU_SERIES="xenial bionic disco eoan"

## xenial

```
wget http://cloud-images.ubuntu.com/releases/xenial/release/ubuntu-16.04-server-cloudimg-amd64.ova
ovftool \
    --name=cloud-init-sru-xenial-$(date +%s) \
    --datastore=SpindleDisks1 \
    --prop:user-data="$(base64 --wrap 0 sethostname.yaml)" \
    --powerOn \
    ubuntu-16.04-server-cloudimg-amd64.ova \
    "vi://administrator@vsphere.local:${PASSWORD}@10.245.200.22/Datacenter1/host/Autopilot/"
```

## bionic

```
wget http://cloud-images.ubuntu.com/releases/bionic/release/ubuntu-18.04-server-cloudimg-amd64.ova
ovftool \
    --name=cloud-init-sru-bionic-$(date +%s) \
    --datastore=SpindleDisks1 \
    --prop:user-data="$(base64 --wrap 0 sethostname.yaml)" \
    --powerOn \
    ubuntu-18.04-server-cloudimg-amd64.ova \
    "vi://administrator@vsphere.local:${PASSWORD}@10.245.200.22/Datacenter1/host/Autopilot/"
```

## cosmic

```
wget http://cloud-images.ubuntu.com/releases/cosmic/release/ubuntu-18.10-server-cloudimg-amd64.ova
ovftool \
    --name=cloud-init-sru-cosmic-$(date +%s) \
    --datastore=SpindleDisks1 \
    --prop:user-data="$(base64 --wrap 0 sethostname.yaml)" \
    --powerOn \
    ubuntu-18.10-server-cloudimg-amd64.ova \
    "vi://administrator@vsphere.local:${PASSWORD}@10.245.200.22/Datacenter1/host/Autopilot/"
```

## disco

```
wget http://cloud-images.ubuntu.com/releases/cosmic/release/ubuntu-19.04-server-cloudimg-amd64.ova
ovftool \
    --name=cloud-init-sru-disco-$(date +%s) \
    --datastore=SpindleDisks1 \
    --prop:user-data="$(base64 --wrap 0 sethostname.yaml)" \
    --powerOn \
    ubuntu-19.04-server-cloudimg-amd64.ova \
    "vi://administrator@vsphere.local:${PASSWORD}@10.245.200.22/Datacenter1/host/Autopilot/"
```

# Part 2: Get IP Address

Log in to the web interface and find the VMs we created above.  Each
one should be displaying an IP address.  Make a note of these.

(If one isn't yet displayed; wait a couple of minutes.)

# Part 3: Capture Data

In the below script, update the case statement with the IP addresses you found
in Part 2 before you run it.

```
cat > sethostname.yaml << EOF
## template: jinja
#cloud-config
ssh_import_id : [daniel-thewatkins]
hostname: SRU-worked-{{v1.cloud_name}}
EOF

cat > setup_proposed.sh <<EOF
#/bin/bash
mirror=http://archive.ubuntu.com/ubuntu
echo deb \$mirror \$(lsb_release -sc)-proposed main | tee /etc/apt/sources.list.d/proposed.list
apt-get update -q;
apt-get install -qy cloud-init;
EOF

sshopts=( -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR )

for RELEASE in $SRU_SERIES; do
    echo '=== BEGIN ' $RELEASE
    case $RELEASE in
        xenial) IP="ubuntu@FIXME" ;;
        bionic) IP="ubuntu@FIXME" ;;
        cosmic) IP="ubuntu@FIXME" ;;
    esac

    ssh "${sshopts[@]}" $IP -- cloud-init status --wait --long
    ssh "${sshopts[@]}" $IP -- dpkg-query --show cloud-init
    ssh "${sshopts[@]}" $IP -- sudo cat /run/cloud-init/result.json
    ssh "${sshopts[@]}" $IP -- grep Trace /var/log/cloud-init.log
    ssh "${sshopts[@]}" $IP -- systemd-analyze
    ssh "${sshopts[@]}" $IP -- systemd-analyze blame
    ssh "${sshopts[@]}" $IP -- cloud-init analyze show
    ssh "${sshopts[@]}" $IP -- cloud-init analyze blame

    scp "${sshopts[@]}" setup_proposed.sh $IP:.
    ssh "${sshopts[@]}" $IP -- sudo bash ./setup_proposed.sh 2>&1 | egrep 'cloud-init'
    ssh "${sshopts[@]}" $IP -- dpkg-query --show cloud-init
    ssh "${sshopts[@]}" $IP -- sudo hostname SRU-didnt-work
    ssh "${sshopts[@]}" $IP -- sudo cloud-init clean --logs --reboot

    ssh-keygen -f $HOME/.ssh/known_hosts -R ${IP/ubuntu@}
    sleep 60

    ssh "${sshopts[@]}" $IP -- cloud-init status --wait --long
    ssh "${sshopts[@]}" $IP -- grep Trace /var/log/cloud-init\*
    ssh "${sshopts[@]}" $IP -- sudo cat /run/cloud-init/result.json
    ssh "${sshopts[@]}" $IP -- sudo systemd-analyze blame
    ssh "${sshopts[@]}" $IP -- cloud-init analyze show
    ssh "${sshopts[@]}" $IP -- cloud-init analyze blame
    ssh "${sshopts[@]}" $IP -- cloud-init query --format 'cloud-region: {{cloud_name}}-{{region}}'
    echo 'Get cloud-id'
    ssh "${sshopts[@]}" $IP -- cloud-id
    echo 'Validating whether metadata is being updated per boot LP:1819913'
    ssh "${sshopts[@]}" $IP -- "grep 'Update datasource' /var/log/cloud-init.log"
    ssh "${sshopts[@]}" $IP -- sudo reboot || true
    echo 'After reboot'
    ssh "${sshopts[@]}" $IP -- "grep 'Update datasource' /var/log/cloud-init.log"
done
```
